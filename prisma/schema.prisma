generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model StudentProfile {
  id        Int       @id @default(autoincrement())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  avatarUrl String?   @map("avatar_url")
  phone     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  students  Student[]

  @@map("student_profiles")
}

model Student {
  id                 Int                   @id @default(autoincrement())
  profileId          Int                   @unique @map("profile_id")
  email              String                @unique
  password           String
  studentAttendances StudentAttendance[]
  notifications      StudentNotification[]
  profile            StudentProfile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  classStudents      ClassStudent[]

  @@map("students")
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  role      UserRole
  users     User[]

  @@map("user_profiles")
}

model User {
  id                  Int                 @id @default(autoincrement())
  profileId           Int                 @map("profile_id")
  email               String              @unique
  password            String
  profile             UserProfile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  teachingAttendances TeacherAttendance[]
  notifications       UserNotification[]
  classTeachers       ClassTeacher[]

  @@map("teachers")
}

model Classe {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  slug          String         @unique
  description   String?        @db.Text
  classTeachers ClassTeacher[]
  classStudents ClassStudent[]

  @@index([name, slug])
  @@map("classes")
}

model ClassTeacher {
  id                  Int                  @id @default(autoincrement())
  teacherId           Int                  @map("teacher_id")
  classId             Int                  @map("class_id")
  teacher             User                 @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classe              Classe               @relation(fields: [classId], references: [id], onDelete: Cascade)
  classTeacherCourses ClassTeacherCourse[]

  @@unique([teacherId, classId])
  @@map("class_teachers")
}

model ClassStudent {
  id        Int     @id @default(autoincrement())
  studentId Int     @map("student_id")
  classId   Int     @map("class_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classe    Classe  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("class_students")
}

model Course {
  id                  Int                  @id @default(autoincrement())
  name                String
  slug                String               @unique
  description         String?              @db.Text
  classTeacherCourses ClassTeacherCourse[]

  @@index([slug])
  @@map("courses")
}

model ClassTeacherCourse {
  id             Int             @id @default(autoincrement())
  classTeacherId Int             @map("class_teacher_id")
  courseId       Int             @map("course_id")
  classTeacher   ClassTeacher    @relation(fields: [classTeacherId], references: [id], onDelete: Cascade)
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  schedules      ClassSchedule[]

  @@unique([classTeacherId, courseId])
  @@map("class_teacher_courses")
}

model ClassSchedule {
  id                   Int                 @id @default(autoincrement())
  classTeacherCourseId Int                 @map("class_teacher_course_id")
  day                  WeekDays            @map("day")
  startTime            String              @map("start_time")
  endTime              String              @map("end_time")
  note                 String?             @db.Text
  classTeacherCourse   ClassTeacherCourse  @relation(fields: [classTeacherCourseId], references: [id], onDelete: Cascade)
  teacherAttendances   TeacherAttendance[]
  studentAttendances   StudentAttendance[]

  @@unique([classTeacherCourseId, day, startTime, endTime])
  @@map("class_schedules")
}

model TeacherAttendance {
  id         Int              @id @default(autoincrement())
  teacherId  Int              @map("teacher_id")
  scheduleId Int              @map("schedule_id")
  teacher    User             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  schedule   ClassSchedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  status     AttendanceStatus
  date       DateTime         @default(now())

  @@unique([teacherId, scheduleId])
  @@map("teacher_attendances")
}

model StudentAttendance {
  id         Int              @id @default(autoincrement())
  studentId  Int              @map("student_id")
  scheduleId Int              @map("schedule_id")
  student    Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  schedule   ClassSchedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  status     AttendanceStatus
  date       DateTime         @default(now())

  @@unique([studentId, scheduleId])
  @@map("student_attendances")
}

model UserNotification {
  id        Int                @id @default(autoincrement())
  userId    Int                @map("user_id")
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content   String
  createdAt DateTime           @default(now()) @map("created_at")
  status    NotificationStatus

  @@map("user_notifications")
}

model StudentNotification {
  id        Int                @id @default(autoincrement())
  studentId Int                @map("student_id")
  student   Student            @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content   String
  createdAt DateTime           @default(now()) @map("created_at")
  status    NotificationStatus

  @@map("student_notifications")
}

enum UserRole {
  ADMIN @map("admin")
  USER  @map("user")

  @@map("user_role")
}

enum AttendanceStatus {
  ATTEND            @map("attend")
  ABSENT            @map("absent")
  JUSTIFIED_ABSENCE @map("justified_absence")

  @@map("attendance_status")
}

enum NotificationStatus {
  SEEN    @map("seen")
  PENDING @map("pending")
  FAILED  @map("failed")

  @@map("notification_status")
}

enum WeekDays {
  MONDAY    @map("monday")
  TUESDAY   @map("tuesday")
  WEDNESDAY @map("wednesday")
  THURSDAY  @map("thursday")
  FRIDAY    @map("friday")
  SATURDAY  @map("saturday")
  SUNDAY    @map("sunday")

  @@map("week_days")
}
