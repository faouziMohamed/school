{"version":3,"sources":["users.service.js"],"names":["getAllUsers","prisma","user","findMany","users","createUser","userData","create","data","firstName","lastName","email","String","toLowerCase","phone","role","password","newUser","console","log","message","isUserExistByEmail","findUniqueOrThrow","where","getUserById","userId","findFirst","id","Number","getUserByEmail"],"mappings":";;;;;;;;;;;AAAA;;;;AAEO,SAAeA,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACeC,mBAAOC,IAAP,CAAYC,QAAZ,EADf;;AAAA;AACCC,UAAAA,KADD;AAAA,2CAEEA,KAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAeC,UAAf,CAA0BC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEmBL,mBAAOC,IAAP,CAAYK,MAAZ,CAAmB;AACvCC,YAAAA,IAAI,EAAE;AACJC,cAAAA,SAAS,EAAEH,QAAQ,CAACG,SADhB;AAEJC,cAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAFf;AAGJC,cAAAA,KAAK,EAAEC,MAAM,CAACN,QAAQ,CAACK,KAAV,CAAN,CAAuBE,WAAvB,EAHH;AAIJC,cAAAA,KAAK,EAAER,QAAQ,CAACQ,KAJZ;AAKJC,cAAAA,IAAI,EAAE,SALF;AAMJC,cAAAA,QAAQ,EAAEV,QAAQ,CAACU;AANf;AADiC,WAAnB,CAFnB;;AAAA;AAEGC,UAAAA,OAFH;AAAA,4CAaIA,OAbJ;;AAAA;AAAA;AAAA;AAeHC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAMC,OAAlB;AAfG,4CAgBI,IAhBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAeC,kBAAf,CAAkCV,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEaV,mBAAOC,IAAP,CAAYoB,iBAAZ,CAA8B;AAAEC,YAAAA,KAAK,EAAE;AAAEZ,cAAAA,KAAK,EAALA;AAAF;AAAT,WAA9B,CAFb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAII,KAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAea,WAAf,CAA2BC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACQxB,mBAAOC,IAAP,CAAYwB,SAAZ,CAAsB;AACjCH,YAAAA,KAAK,EAAE;AACLI,cAAAA,EAAE,EAAEC,MAAM,CAACH,MAAD;AADL;AAD0B,WAAtB,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAeI,cAAf,CAA8BlB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACQV,mBAAOC,IAAP,CAAYwB,SAAZ,CAAsB;AACjCH,YAAAA,KAAK,EAAE;AACLZ,cAAAA,KAAK,EAAEC,MAAM,CAACD,KAAD,CAAN,CAAcE,WAAd;AADF;AAD0B,WAAtB,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import prisma from \"../db/prisma.orm\";\r\n\r\nexport async function getAllUsers() {\r\n  const users = await prisma.user.findMany();\r\n  return users;\r\n}\r\n\r\nexport async function createUser(userData) {\r\n  try {\r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        email: String(userData.email).toLowerCase(),\r\n        phone: userData.phone,\r\n        role: \"STUDENT\",\r\n        password: userData.password,\r\n      },\r\n    });\r\n\r\n    return newUser;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function isUserExistByEmail(email) {\r\n  try {\r\n    return !!(await prisma.user.findUniqueOrThrow({ where: { email } }));\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getUserById(userId) {\r\n  return await prisma.user.findFirst({\r\n    where: {\r\n      id: Number(userId),\r\n    },\r\n  });\r\n}\r\n\r\nexport async function getUserByEmail(email) {\r\n  return await prisma.user.findFirst({\r\n    where: {\r\n      email: String(email).toLowerCase(),\r\n    },\r\n  });\r\n}\r\n"],"file":"users.service.dev.js"}