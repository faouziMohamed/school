{"version":3,"sources":["users.service.js"],"names":["_prisma","_interopRequireDefault","require","getAllUsers","users","regeneratorRuntime","async","_context","prev","next","awrap","prisma","user","findMany","sent","abrupt","stop","createUser","userData","newUser","_context2","create","data","firstName","lastName","email","String","toLowerCase","phone","role","password","t0","console","log","message","isUserExistByEmail","_context3","findUniqueOrThrow","where","getUserById","userId","_context4","id","Number","getUserByEmail","_context5","findFirst"],"mappings":"sPAAA,IAAAA,QAAAC,uBAAAC,QAAA,6FAEO,SAAeC,cAAf,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MACeC,QAAAA,QAAOC,KAAKC,YAD3B,KAAA,EAAA,OACCT,EADDG,EAAAO,KAAAP,EAAAQ,OAAA,SAEEX,GAFF,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAS,UAKA,SAAeC,WAAWC,GAA1B,IAAAC,EAAA,OAAAd,mBAAAC,MAAA,SAAAc,GAAA,OAAA,OAAAA,EAAAZ,KAAAY,EAAAX,MAAA,KAAA,EAAA,OAAAW,EAAAZ,KAAA,EAAAY,EAAAX,KAAA,EAAAJ,mBAAAK,MAEmBC,QAAAA,QAAOC,KAAKS,OAAO,CACvCC,KAAM,CAVZC,UAAAL,EAAAK,UAYQC,SAAUN,EAASM,SACnBC,MAAOC,OAAOR,EAASO,OAAOE,cAC9BC,MAAOV,EAASU,MAZjBC,KAAe1B,UAAf2B,SAAAZ,EAAAY,aAKA,KAAA,EAAA,OAEGX,EAFHC,EAAAN,KAAAM,EAAAL,OAAA,SALAI,GAKA,KAAA,EAAA,OAAAC,EAAAZ,KAAA,EAAAY,EAAAW,GAAAX,EAAA,MAAA,GALAY,QAAAC,IAAAb,EAAAW,GAAAG,SAKAd,EAAAL,OAAA,SAgBI,MAhBJ,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAoBA,SAAemB,mBAAmBV,GAAlC,OAAApB,mBAAAC,MAAA,SAAA8B,GAAA,OAAA,OAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,KAAA,EAAA,OAAA2B,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAAAJ,mBAAAK,MAzBAC,QAAAA,QAAAC,KAAAyB,kBAAA,CAAAC,MAAA,CAAAb,MAAAA,MAyBA,KAAA,EAAA,OAAAW,EAAArB,OAAA,WAAAqB,EAAAtB,MAAA,KAAA,EAAA,OAAAsB,EAAA5B,KAAA,EAAA4B,EAAAL,GAAAK,EAAA,MAAA,GAAAA,EAAArB,OAAA,UAzBA,GAyBA,KAAA,EAAA,IAAA,MAAA,OAAAqB,EAAApB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAQA,SAAeuB,YAAYC,GAA3B,OAAAnC,mBAAAC,MAAA,SAAAmC,GAAA,OAAA,OAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,KAAA,EAAA,OAAAgC,EAAAhC,KAAA,EAAAJ,mBAAAK,MA5BeO,QAAAA,QAAWC,KAAAA,UAA1B,CAAAoB,MAAA,CAAAI,GAAAC,OAAAH,OA4BA,KAAA,EAAA,OAAAC,EAAA1B,OAAA,SAAA0B,EAAA3B,MAAA,KAAA,EAAA,IAAA,MAAA,OAAA2B,EAAAzB,UA5BA,SAAA4B,eAAAnB,GAAA,OAAApB,mBAAAC,MAAA,SAAAuC,GAAA,OAAA,OAAAA,EAAArC,KAAAqC,EAAApC,MAAA,KAAA,EAAA,OAAAoC,EAAApC,KAAA,EAAAJ,mBAAAK,MAAAC,QAAAA,QAAAC,KAAAkC,UAAA,CAGDxB,MAAAA,CACEC,MAAAA,OAAAA,GAAWL,kBAJZ,KAAA,EAAA,OAAA2B,EAAA9B,OAAA,SAAA8B,EAAA/B,MAAA,KAAA,EAAA,IAAA,MAAA,OAAA+B,EAAA7B","file":"users.service.min.js","sourcesContent":["import prisma from \"../db/prisma.orm\";\r\n\r\nexport async function getAllUsers() {\r\n  const users = await prisma.user.findMany();\r\n  return users;\r\n}\r\n\r\nexport async function createUser(userData) {\r\n  try {\r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        email: String(userData.email).toLowerCase(),\r\n        phone: userData.phone,\r\n        role: \"STUDENT\",\r\n        password: userData.password,\r\n      },\r\n    });\r\n\r\n    return newUser;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function isUserExistByEmail(email) {\r\n  try {\r\n    return !!(await prisma.user.findUniqueOrThrow({ where: { email } }));\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getUserById(userId) {\r\n  return await prisma.user.findFirst({\r\n    where: {\r\n      id: Number(userId),\r\n    },\r\n  });\r\n}\r\n\r\nexport async function getUserByEmail(email) {\r\n  return await prisma.user.findFirst({\r\n    where: {\r\n      email: String(email).toLowerCase(),\r\n    },\r\n  });\r\n}\r\n"]}