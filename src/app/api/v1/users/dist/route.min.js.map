{"version":3,"sources":["route.js"],"names":["_users","require","_server","GET","users","regeneratorRuntime","async","_context","prev","next","awrap","getAllUsers","sent","abrupt","NextResponse","json","message","status","stop","POST","request","body","firstName","lastName","email","phone","password","_body$role","role","missingFields","data","newUser","_context2","push","length","isUserExistByEmail","signInPath","console","log","createUser","user","url","concat","id"],"mappings":"sGAAA,IAAAA,OAAAC,QAAA,sCAKAC,QAAAD,QAAA,eAEO,SAAeE,MAAf,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,OAPP,EAAAV,OAAAW,gBAOO,KAAA,EAAA,GAPPP,EAOOG,EAAAK,KAAA,CAAAL,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAM,OAAA,SAFPC,QAAAA,aAAAC,KAMM,CAJCC,QAAA,yCAAAZ,MAAA,IAAA,CAAAa,OAAA,OAAA,KAAA,EAAA,OAAAV,EAAAM,OAAA,SAAAC,QAAAA,aAAAC,KAAA,CAAAX,MAAAA,KAAA,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAW,UAAA,SAAAC,KAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA1B,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAAAuB,EAAAvB,KAAA,EAAAJ,mBAAAK,MAAAU,EAAAL,QAAA,KAAA,EAAA,GACCX,EADD4B,EAAApB,KAAA,CAAAoB,EAAAvB,KAAA,EAAA,MAAA,OAAAuB,EAAAnB,OAAA,SAAAC,QAAAA,aAAAC,KAAA,CAAAC,QAAA,6DAAA,CAAAC,OAAA,OAAA,KAAA,EAAA,GAMCb,EANDiB,EAMCjB,UAFFmB,EAJCF,EAIDE,SAIEN,EARDI,EAQCJ,MAAFQ,EARCJ,EAQDI,MAoBFC,EA5BGL,EA4BHK,SA5BGC,EAAAN,EAAAO,KAAAA,OAAA,IAAAD,EAAA,UAAAA,EAWoBE,EAXpB,GAiCAP,GAjCAO,EAAAI,KAAA,aAAAV,GAAAM,EAAAI,KAAA,YAAAT,GAAAK,EAAAI,KAAA,SAcAR,GAAAI,EAAAI,KAAA,SAAAP,GAAAG,EAAAI,KAAA,YAAA,EAAAJ,EAAAK,OAdA,OAAAF,EAAAnB,OAAA,SAmDIC,QAAAA,aAAaC,KArCjB,CACCM,QADD,iDAwCCQ,cAAAA,GAxCD,CAAAZ,OAAA,OAdAe,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAuB,EAAAvB,KAAA,GAAAJ,mBAAAK,OAcA,EAAAV,OAAAmC,oBAGIrB,IAjBJ,KAAA,GAAA,GAAAkB,EAAApB,KAAA,OAAAoB,EAAAnB,OAAA,SAiBIC,QAAAA,aAELC,KAAEE,CAAFD,QALC,oDAmDCoB,WAAY,mBAzChBd,CAAAA,OAAAA,OAxBGU,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAAA,OAiCL4B,QAAAC,IAAI,CAAChB,KAAAA,IACHO,EAAAA,CACDP,UAAAA,EAsCCC,SAAAA,EArCFC,MAAAA,EACEK,MAAAA,EACDD,KAAAA,EAuCCF,SAAAA,GA7EGM,EAAAvB,KAAA,GAAAJ,mBAAAK,OAyCJ,EAAAV,OAAAuC,YAAAT,IAzCI,KAAA,GAAA,GAyCJC,EAzCIC,EAAApB,KAiFLyB,QAAQC,IAAI,CAAEP,QAAAA,IAvCdA,EA1CK,CAAAC,EAAAvB,KAAA,GAAA,MAAA,OAAAuB,EAAAnB,OAAA,SA2CHgB,QAAAA,aAAAA,KACD,CAyCKb,QAvCN,sEAEC,CAAAC,OAAA,OAhDI,KAAA,GAAA,OAAAe,EAAAnB,OAAA,SAcAC,QAAAA,aAAAC,KAAA,CAgFDyB,KAAMT,EAhFLU,IAAA,iBAAAC,OAAAX,EAAAY,KAwCCd,CAAAA,OAAAA,OAtDD,KAAA,GAAA,IAAA,MAAA,OAAAG,EAAAd","file":"route.min.js","sourcesContent":["import {\r\n  createUser,\r\n  getAllUsers,\r\n  isUserExistByEmail,\r\n} from \"@/lib/packages/users/users.service\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function GET() {\r\n  const users = await getAllUsers();\r\n  if (!users) {\r\n    return NextResponse.json(\r\n      {\r\n        message: \"No user exists on the app, retry later\",\r\n        users: [],\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  return NextResponse.json({ users });\r\n}\r\n\r\nexport async function POST(request) {\r\n  const body = await request.json();\r\n  if (!body) {\r\n    return NextResponse.json(\r\n      { message: \"A body is expected on the request but none has been found\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    phone,\r\n    password,\r\n    role = \"STUDENT\",\r\n  } = body;\r\n\r\n  const missingFields = [];\r\n  if (!firstName) {\r\n    missingFields.push(\"firstName\");\r\n  }\r\n  if (!lastName) {\r\n    missingFields.push(\"lastName\");\r\n  }\r\n  if (!email) {\r\n    missingFields.push(\"email\");\r\n  }\r\n  if (!phone) {\r\n    missingFields.push(\"phone\");\r\n  }\r\n\r\n  if (!password) {\r\n    missingFields.push(\"password\");\r\n  }\r\n\r\n  if (missingFields.length > 0) {\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Some fields are mandatory but they are missing\",\r\n        missingFields,\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const userExist = await isUserExistByEmail(email);\r\n  if (userExist) {\r\n    return NextResponse.json(\r\n      {\r\n        message: \"An account with the provided email already exists\",\r\n        signInPath: \"/api/v1/sign-in\",\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  console.log({ body });\r\n  const data = {\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    phone,\r\n    role,\r\n    password,\r\n  };\r\n\r\n  const newUser = await createUser(data);\r\n  console.log({ newUser });\r\n  if (!newUser) {\r\n    return NextResponse.json(\r\n      {\r\n        message:\r\n          \"An unexpected error has occured, plese try creating the user later\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n\r\n  return NextResponse.json(\r\n    {\r\n      user: newUser,\r\n      url: `/api/v1/users/${newUser.id}`,\r\n    },\r\n    { status: 201 }\r\n  );\r\n}\r\n"]}