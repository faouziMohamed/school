{"version":3,"sources":["route.js"],"names":["GET","users","NextResponse","json","message","status","POST","request","body","firstName","lastName","email","phone","password","role","missingFields","push","length","userExist","signInPath","console","log","data","newUser","user","url","id"],"mappings":"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","sourcesContent":["import {\r\n  createUser,\r\n  getAllUsers,\r\n  isUserExistByEmail,\r\n} from \"@/lib/packages/users/users.service\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function GET() {\r\n  const users = await getAllUsers();\r\n  if (!users) {\r\n    return NextResponse.json(\r\n      {\r\n        message: \"No user exists on the app, retry later\",\r\n        users: [],\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  return NextResponse.json({ users });\r\n}\r\n\r\nexport async function POST(request) {\r\n  const body = await request.json();\r\n  if (!body) {\r\n    return NextResponse.json(\r\n      { message: \"A body is expected on the request but none has been found\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    phone,\r\n    password,\r\n    role = \"STUDENT\",\r\n  } = body;\r\n\r\n  const missingFields = [];\r\n  if (!firstName) {\r\n    missingFields.push(\"firstName\");\r\n  }\r\n  if (!lastName) {\r\n    missingFields.push(\"lastName\");\r\n  }\r\n  if (!email) {\r\n    missingFields.push(\"email\");\r\n  }\r\n  if (!phone) {\r\n    missingFields.push(\"phone\");\r\n  }\r\n\r\n  if (!password) {\r\n    missingFields.push(\"password\");\r\n  }\r\n\r\n  if (missingFields.length > 0) {\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Some fields are mandatory but they are missing\",\r\n        missingFields,\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const userExist = await isUserExistByEmail(email);\r\n  if (userExist) {\r\n    return NextResponse.json(\r\n      {\r\n        message: \"An account with the provided email already exists\",\r\n        signInPath: \"/api/v1/sign-in\",\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  console.log({ body });\r\n  const data = {\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    phone,\r\n    role,\r\n    password,\r\n  };\r\n\r\n  const newUser = await createUser(data);\r\n  console.log({ newUser });\r\n  if (!newUser) {\r\n    return NextResponse.json(\r\n      {\r\n        message:\r\n          \"An unexpected error has occured, plese try creating the user later\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n\r\n  return NextResponse.json(\r\n    {\r\n      user: newUser,\r\n      url: `/api/v1/users/${newUser.id}`,\r\n    },\r\n    { status: 201 }\r\n  );\r\n}\r\n"],"file":"route.dev.js"}